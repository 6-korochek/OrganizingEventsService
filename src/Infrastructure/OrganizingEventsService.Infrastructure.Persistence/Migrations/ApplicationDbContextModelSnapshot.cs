// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrganizingEventsService.Infrastructure.Persistence.Contexts;

#nullable disable

namespace OrganizingEventsService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "event_participant_invite_status", new[] { "accepted", "declined", "pending" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "event_status", new[] { "in_draft", "planed", "is_over", "in_going" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.AccountModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("IsInvite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_invite")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("PasswordHashUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("password_hash_created_at");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("account_pkey");

                    b.HasIndex(new[] { "Email" }, "account_email_key")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.EventModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_datetime");

                    b.Property<string>("InviteCode")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("invite_code");

                    b.Property<decimal>("MaxParticipant")
                        .HasPrecision(4)
                        .HasColumnType("numeric(4)")
                        .HasColumnName("max_participant");

                    b.Property<string>("MeetingLink")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("meeting_link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("InDraft")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("event_pkey");

                    b.HasIndex(new[] { "InviteCode" }, "event_invite_code_key")
                        .IsUnique();

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.EventParticipantModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("InviteStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("invite_status");

                    b.Property<bool?>("IsArchive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("IsBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_banned")
                        .HasDefaultValueSql("false");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("event_participant_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("EventId");

                    b.HasIndex("RoleId");

                    b.ToTable("event_participant", (string)null);
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.FeedbackModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EventParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_participant_id");

                    b.Property<decimal>("Rating")
                        .HasPrecision(1)
                        .HasColumnType("numeric(1)")
                        .HasColumnName("rating");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("feedback_pkey");

                    b.HasIndex("EventParticipantId");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.PermissionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("permission_pkey");

                    b.HasIndex(new[] { "Name" }, "permission_name_key")
                        .IsUnique();

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.RoleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("role_pkey");

                    b.HasIndex(new[] { "Name" }, "role_name_key")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.RolePermissionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("role_permission_pkey");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.EventParticipantModel", b =>
                {
                    b.HasOne("OrganizingEventsService.Infrastructure.Persistence.Models.AccountModel", "AccountIdNavigation")
                        .WithMany("EventParticipants")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_participant_account_pk_fkey");

                    b.HasOne("OrganizingEventsService.Infrastructure.Persistence.Models.EventModel", "EventIdNavigation")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_participant_event_pk_fkey");

                    b.HasOne("OrganizingEventsService.Infrastructure.Persistence.Models.RoleModel", "RoleIdNavigation")
                        .WithMany("EventParticipants")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("event_participant_role_pk_fkey");

                    b.Navigation("AccountIdNavigation");

                    b.Navigation("EventIdNavigation");

                    b.Navigation("RoleIdNavigation");
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.FeedbackModel", b =>
                {
                    b.HasOne("OrganizingEventsService.Infrastructure.Persistence.Models.EventParticipantModel", "EventParticipantIdNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("EventParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("feedback_event_participant_pk_fkey");

                    b.Navigation("EventParticipantIdNavigation");
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.RolePermissionModel", b =>
                {
                    b.HasOne("OrganizingEventsService.Infrastructure.Persistence.Models.PermissionModel", "PermissionIdNavigation")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_permission_permission_pk_fkey");

                    b.HasOne("OrganizingEventsService.Infrastructure.Persistence.Models.RoleModel", "RoleIdNavigation")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_permission_role_pk_fkey");

                    b.Navigation("PermissionIdNavigation");

                    b.Navigation("RoleIdNavigation");
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.AccountModel", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.EventModel", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.EventParticipantModel", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.PermissionModel", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("OrganizingEventsService.Infrastructure.Persistence.Models.RoleModel", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
